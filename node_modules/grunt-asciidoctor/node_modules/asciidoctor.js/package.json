{
  "name": "asciidoctor.js",
  "version": "1.5.0",
  "description": "A JavaScript AsciiDoc processor, cross-compiled from the Ruby-based AsciiDoc implementation, Asciidoctor, using Opal",
  "main": "dist/npm/asciidoctor-core.min.js",
  "files": [
    "dist/npm/asciidoctor-core.gz.js",
    "dist/npm/asciidoctor-core.js",
    "dist/npm/asciidoctor-core.min.js",
    "dist/npm/asciidoctor-extensions.gz.js",
    "dist/npm/asciidoctor-extensions.js",
    "dist/npm/asciidoctor-extensions.min.js",
    "dist/npm/asciidoctor-docbook.gz.js",
    "dist/npm/asciidoctor-docbook.js",
    "dist/npm/asciidoctor-docbook.min.js",
    "dist/css/asciidoctor.css",
    "LICENSE",
    "README.adoc"
  ],
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/asciidoctor/asciidoctor.js.git"
  },
  "keywords": [
    "asciidoc",
    "asciidoctor",
    "opal",
    "javascript",
    "library"
  ],
  "authors": [
    "Dan Allen (https://github.com/mojavelinux)",
    "Guillaume Grossetie (https://github.com/mogztter)",
    "Anthonny Quérouil (https://github.com/anthonny)"
  ],
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/asciidoctor/asciidoctor.js/issues"
  },
  "homepage": "https://github.com/asciidoctor/asciidoctor.js",
  "dependencies": {
    "opal-npm-wrapper": "git://github.com/anthonny/opal-npm-wrapper.git#0.1.0",
    "xmlhttprequest": "~1.6.0"
  },
  "devDependencies": {
    "bower": "^1.3.3",
    "grunt": "^0.4.5",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-clean": "^0.5.0",
    "grunt-contrib-compress": "^0.8.0",
    "grunt-contrib-concat": "^0.4.0",
    "grunt-contrib-copy": "^0.5.0",
    "grunt-contrib-jasmine": "^0.6.4",
    "grunt-contrib-uglify": "^0.4.0",
    "grunt-jasmine-node": "^0.2.1",
    "grunt-shell": "^0.7.0",
    "grunt-string-replace": "^0.2.7"
  },
  "readme": "= Asciidoctor.js: AsciiDoc in JavaScript powered by Asciidoctor\nDan Allen <https://github.com/mojavelinux[@mojavelinux]>; Guillaume Grossetie <https://github.com/mogztter[@mogztter]>; Anthonny Quérouil <https://github.com/anthonny[@anthonny]>\n:idprefix:\n:idseparator: -\n:sources: https://github.com/asciidoctor/asciidoctor.js\n:license: https://github.com/asciidoctor/asciidoctor.js/blob/master/LICENSE\n:experimental:\n:endash:\n\nifdef::env-github[]\nimage::https://travis-ci.org/asciidoctor/asciidoctor.js.svg?branch=master[Build Status, link=https://travis-ci.org/asciidoctor/asciidoctor.js]\nendif::[]\n\nThis project uses http://opalrb.org[Opal] to transcompile http://asciidoctor.org[Asciidoctor]—a modern implementation of AsciiDoc—from Ruby to JavaScript to produce [path]_asciidoctor.js_, bringing http://asciidoc.org[AsciiDoc] to the browser!\n\n== Introduction\n\n{sources}[Asciidoctor.js] is direct port of http://asciidoctor.org[Asciidoctor] from Ruby to JavaScript using http://opalrb.org[Opal], a Ruby-to-JavaScript transcompiler.\nIt consists of a Rake build script that executes the Opal compiler on the Asciidoctor source code to produce the asciidoctor.js script.\nA Grunt build is used to assemble and prepare the distribution files, using the Rake build underneath.\n\nOpal parses the Ruby code and any required libraries, then rewrites the code into JavaScript under the Opal namespace.\nThe resulting JavaScript can be executed within any JavaScript runtime environment (such as a browser).\n\nTo interact with the generated code, you either invoke the JavaScript APIs directly, or you can invoke native JavaScript objects from within the Ruby code prior to compilation.\n\n== Setup\n\nTo build [path]_asciidoctor.js_, you'll need some tools:\n\n* Npm and Node\n* Bower\n* Rake and Bundle\n\nStart by cloning the source from GitHub:\n\n $ git clone git://github.com/asciidoctor/asciidoctor.js\n\nNext, switch to the _asciidoctor.js_ directory and run Npm's `install` command followed by Bower's `install` command:\n\n $ cd asciidoctor.js\n $ npm install\n $ bower install\n\nYou're now ready to build asciidoctor.js.\n\n[TIP]\n====\nOpal.js, The Ruby runtime in JavaScript is available in `bower_components/opal/opal/current/opal.min.js`\n====\n\n== Building asciidoctor.js\n\nTo build asciidoctor.js, simple run the Grunt `dist` task from the root of the project:\n\n $ grunt dist\n\nNOTE: The build task will make some minor code changes on the asciidoctor submodule.\nAs you may know String are immutable in Javascript, so we need to replace `gsub!` and `sub!` methods.\nThese changes are made at build time to keep the Ruby code as fast as possible.\n\nThis command produces some files in the [path]_dist_ directory:\n\n* *dist/*\n- *asciidoctor.js* (includes core and extensions)\n- *asciidoctor-core.js* (no extensions API)\n- *asciidoctor-extensions.js* (extensions API only)\n- *asciidoctor-docbook.js* (docbook backends : docbook45 and docbook5)\n- *asciidoctor-all.js* (core, extension and Opal. Docbook isn't the main target of webapp, for this reason we choose to keep it separate)\n\n* *dist/npm* (to use with Npm)\n- *asciidoctor-core.js* (no extensions API, will automatically load docbook backends)\n- *asciidoctor-extensions.js* (extensions API only)\n- *asciidoctor-docbook.js* (docbook backends : docbook45 and docbook5)\n\nEach file has a `minified` and `gz` version.\n\nYou'll see these scripts in action when you run the examples, described next.\n\n== Building and running the examples\n\nTo build the examples, simply run the Rake `examples` task from the root of the project:\n\n $ grunt examples\n\nThis command produces another JavaScript file in the [path]_build_ directory, [path]_asciidoctor_example.js_.\nThis script includes:\n\n* a string that contains an AsciiDoc source document\n* a call to the Asciidoctor API to render the content of that string to HTML\n* an event listener that inserts the generated HTML into the page\n\nAll the JavaScript in that file was generated from a Ruby script by Opal.\n\nPoint your browser at [path]_build/asciidoctor_example.html_.\nYou should see the AsciiDoc Syntax Quick Reference document.\nThe content on the page was rendered from AsciiDoc by asciidoctor.js when you loaded the page!\n\n== Using Asciidoctor in JavaScript\n\nThere are two ways to use the JavaScript version of Asciidoctor:\n\n. Write code in Ruby that hooks into the native JavaScript environment, which Opal compiles into JavaScript\n. Invoke the JavaScript APIs that Opal generates directly from JavaScript\n\n=== Using Asciidoctor and the native JavaScript environment from Ruby\n\nFirst, we'll stuff some AsciiDoc data into a variable inside a Ruby script:\n\n[source,ruby]\n----\ndata = <<-EOS\n= asciidoctor.js, AsciiDoc in JavaScript\nDoc Writer <docwriter@example.com>\n\nAsciidoctor and Opal come together to bring\nhttp://asciidoc.org[AsciiDoc] to the browser!\n\n== Technologies\n\n* AsciiDoc\n* Asciidoctor\n* Opal\n\nNOTE: That's all she wrote!\nEOS\n----\n\nNext, we invoke Asciidoctor in Ruby just as we normally would:\n\n[source,ruby]\n----\nhtml_doc = Asciidoctor.render(data, :safe => :safe,\n  :attributes => %w(notitle! anchors imagesdir=./images))\n----\n\nWe then use the global `$window` object provided by Opal to register a listener that inserts the rendered HTML document into the page:\n\n[source,ruby]\n----\n$window.addEventListener 'DOMContentLoaded', proc {\n  $document.getElementById('content').innerHTML = html_doc\n}, false\n----\n\nThe final step is to compile this Ruby code into JavaScript using the Opal compiler.\n\n[source,ruby]\n----\nenv = Opal::Environment.new\nenv.append_path 'examples'\ncompiled = env['asciidoctor_example'].to_s\nFile.open('build/asciidoctor_example.js', 'w') { |f| f << compiled }\n----\n\nWhen the [path]_asciidoctor_example.js_ script is loaded by the browser, the Ruby code (compiled as JavaScript) is executed, rendering the AsciiDoc document and inserting the result into the page.\n\nYou can also invoke Asciidoctor directly from JavaScript.\n\n== Using Asciidoctor from JavaScript\n\nIf you choose, you may use the Asciidoctor class that Opal generates directly from Ruby.\n\n=== Front-end development\n\n*Asciidoctor.js* gives you its files using http://bower.io[Bower].\n\nStart by install *asciidoctor.js* component :\n[source, shell]\n----\nbower install asciidoctor.js --save\n----\n\nNOTE: Asciidoctor.js has a dependency with *opal* and when you run the install command, *Opal* is automatically downloaded in [path]_bower_components/opal/_\n\n\nYou need to load file(s) into your JavaScript environment to use Asciidoctor.\nFor instance, in an HTML page, add these `<script>` tag (ideally at the bottom of the page):\n\n[source,html]\n----\n<script src=\"bower_components/asciidoctor.js/dist/asciidoctor-all.min.js\"></script>\n<!-- If you need docbook backends -->\n<script src=\"bower_components/asciidoctor.js/dist/asciidoctor-docbook.min.js\"></script>\n----\n\nIf you don't want to use *extensions*, you can load files separately :\n\n[source,html]\n----\n<script src=\"bower_components/opal/opal/current/opal.min.js\"></script>\n<script src=\"bower_components/asciidoctor.js/dist/asciidoctor-core.min.js\"></script>\n<!-- If you need docbook backends -->\n<script src=\"bower_components/asciidoctor.js/dist/asciidoctor-docbook.min.js\"></script>\n----\n\nAll Opal-compiled classes are stored under the Opal namespace.\nRuby variables and methods on a class or object get prefixed with `$`.\nThus, where you would execute `Asciidoctor.convert` in Ruby, you execute `Opal.Asciidoctor.$convert` in JavaScript.\n\n[source,javascript]\n----\nvar html_doc =Opal.Asciidoctor.$convert(\n    \"http://asciidoctor.org[*Asciidoctor*] \" +\n    \"running on http://opalrb.org[_Opal_] \" +\n    \"brings AsciiDoc to the browser!\")\n----\n\nYou would insert the rendered document into the page using the normal JavaScript DOM methods:\n\n[source,javascript]\n----\ndocument.getElementById('content').innerHTML = Opal.Asciidoctor.$convert(\n    \"http://asciidoctor.org[*Asciidoctor*] \" +\n    \"running on http://opalrb.org[_Opal_] \" +\n    \"brings AsciiDoc to the browser!\")\n----\n\nPassing the options `Hash` to the `convert` method requires a little bit of Opal voodoo:\n\n[source,javascript]\n----\nOpal.hash2(['attributes'], {'attributes': ['notitle!']})\n----\n\n=== Back-end development\n\nFor back-end development, we use *npm*.\n\nStart by install *asciidoctor.js* module:\n\n[source, javascript]\n----\nnpm install asciidoctor.js --save\n----\n\nYou need to load file into your application.\nFor instance, in a Javascript file, add these line:\n\n[source, javascript]\n----\nvar asciidoctorObject = require('asciidoctor.js')();\n\n// You can get Opal\nvar opal = asciidoctorObject.Opal;\n\n// You can get Asciidoctor with Extensions ...\nvar asciidoctorWithExtensions = asciidoctorObject.Asciidoctor(true);\n// ... or without extensions\n// var asciidoctorWithoutExtensions = asciidoctorObject.Asciidoctor();\n\n// Now you can use it\nvar html = asciidoctorWithExtensions.$convert('== Test', opal.hash2(['attributes'], {'attributes': ['notitle!']}));\n\n// And for example log it\nconsole.log(html);\n\n/*\n// Should return\n<div class=\"sect1\">\n<h2 id=\"_test\">Test</h2>\n<div class=\"sectionbody\">\n\n</div>\n</div>\n*/\n----\n\n\n== Changes to Asciidoctor (from upstream)\n\nCompiling Asciidoctor to JavaScript currently requires some changes in Asciidoctor.\nThat's why the Asciidoctor source is linked into the project as a Git submodule.\nThe goal is to eventually eliminate all of these differences so that Asciidoctor can be compiled to JavaScript as is.\n\nHere's a list of some of the changes that are currently needed:\n\n* Named posix groups in regular expressions are replaced with their ASCII equivalent\n  - JavaScript doesn't support named posix groups, such as [x-]`[[:alpha:]]`)\n* A shim library is needed to implement missing classes in Opal, such as `Set`, `File` and `Dir`\n* All mutable String operations have been replaced with assignments\n  - JavaScript doesn't support mutable strings\n* `$~[0]` used in place of `$&` and `$~[n]` in place of `$n` after running a regular expression (where n is 1, 2, 3...)\n* `Set` is missing difference and union operations\n* Opal doesn't recognize modifiers on a regular expression (e.g., multiline)\n* Optional, non-matching capture groups resolve to empty string in gsub block in Firefox (see http://www.bennadel.com/blog/1916-different-browsers-use-different-non-matching-captured-regex-pattern-values.htm)\n* Assignments without a matching value are set to empty string instead of nil (in the following example, `b` is set to empty string)\n\n  a, b = \"value\".split ',', 2\n\n* ...\n\n== Debugging\n\nCompiling a Ruby application to JavaScript and getting it to run is a process of eliminating fatal errors.\nWhen the JavaScript fails, the message isn't always clear or even close to where things went wrong.\nThe key to working through these failures is to use the browser's JavaScript console.\n\n=== Chrome / Chromium\n\nChrome (and Chromium) has a very intuitive JavaScript console.\nTo open it, press kbd:[Ctrl+Shift+J] or right-click on the page, select menu:Inspect Element[] from the context menu and click the *Console* tab.\n\nWhen an error occurs in the JavaScript, Chrome will print the error message to the console.\nThe error message is interactive.\nClick on the arrow at the start of the line to expand the call trace, as shown here:\n\nimage::error-in-chrome-console.png[]\n\nWhen you identify the entry you want to inspect, click the link to the source location.\nIf you want to inspect the state, add a breakpoint and refresh the page.\n\nChrome tends to cache the JavaScript files too aggressively when running local scripts.\nMake a habit of holding down kbd:[Ctrl] when you click refresh to force Chrome to reload the JavaScript.\n\nAnother option is to start Chrome with the application cache disabled.\n\n $ chrome --disable-application-cache\n\n=== Firefox\n\nFirefox also has a JavaScript console.\nTo open it, press kbd:[Ctrl+Shift+J] or right-click on the page, select menu:Inspect Element[] from the context menu and click the *Web Console* tab.\n\nWhen an error occurs in the JavaScript, Firefox will print the error message to the console.\nUnlike Chrome, the error message is not interactive.\nIts power, instead, lies under the hood.\n\nTo see the call trace when an exception occurs, you need to configure the Debugger to pause on an exception.\nClick the *Debugger* tab, click the configuration gear icon in the upper right corner of that tab and click *Pause on exceptions*.\nRefresh the page and you'll notice that the debugger has paused at the location in the source where the exception is thrown.\n\nimage::error-in-javascript-debugger.png[]\n\nThe call trace is displayed as breadcrumb navigation, which you can use to jump through the stack.\nYou can inspect the state at any location by looking through the panels on the right.\n\n== Copyright\n\nCopyright (C) 2014 Dan Allen, Guillaume Grossetie, Anthonny Quérouil and the Asciidoctor Project.\nFree use of this software is granted under the terms of the MIT License.\n\nSee the {license}[LICENSE] file for details.\n",
  "readmeFilename": "README.adoc",
  "_id": "asciidoctor.js@1.5.0",
  "dist": {
    "shasum": "c491649b7a6fa706bb0a6e9fd7d18d779007d4f8"
  },
  "_from": "asciidoctor.js@1.5.0",
  "_resolved": "https://registry.npmjs.org/asciidoctor.js/-/asciidoctor.js-1.5.0.tgz"
}
